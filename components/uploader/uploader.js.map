{"version":3,"file":"components\\uploader\\uploader.js","sources":["webpack:///./src/components/uploader/uploader.ts?2c78","webpack:///./src/components/uploader/uploader.ts"],"sourcesContent":["module.exports = require(\"!./uploader.ts\")","Component({\r\n    options: {\r\n        addGlobalClass: true\r\n    },\r\n    properties: {\r\n        title: {\r\n            type: String,\r\n            value: '图片上传'\r\n        },\r\n        sizeType: {\r\n            type: Array,\r\n            value: ['original', 'compressed']\r\n        },\r\n        sourceType: {\r\n            type: Array,\r\n            value: ['album', 'camera']\r\n        },\r\n        maxSize: {\r\n            type: Number,\r\n            value: 5 * 1024 * 1024\r\n        },\r\n        maxCount: {\r\n            // 最多上传多少个文件\r\n            type: Number,\r\n            value: 1\r\n        },\r\n        files: {\r\n            // 当前的图片列表, {url, error, loading}\r\n            type: Array,\r\n            value: [],\r\n            observer(newVal) {\r\n                this.setData({\r\n                    currentFiles: newVal\r\n                })\r\n            }\r\n        },\r\n        select: {\r\n            // 过滤某个文件\r\n            type: null,\r\n            value: () => {}\r\n        },\r\n        upload: {\r\n            // 返回Promise的一个文件上传的函数\r\n            type: null,\r\n            value: null\r\n        },\r\n        tips: {\r\n            type: String,\r\n            value: ''\r\n        },\r\n        extClass: {\r\n            type: String,\r\n            value: ''\r\n        },\r\n        showDelete: {\r\n            // 是否显示delete按钮\r\n            type: Boolean,\r\n            value: true\r\n        }\r\n    },\r\n    data: {\r\n        currentFiles: [],\r\n        showPreview: false,\r\n        previewImageUrls: []\r\n    },\r\n    ready() {},\r\n    methods: {\r\n        previewImage(e) {\r\n            const { index } = e.currentTarget.dataset\r\n            const previewImageUrls = []\r\n            this.data.files.forEach((item) => {\r\n                previewImageUrls.push(item.url)\r\n            })\r\n            this.setData({\r\n                previewImageUrls,\r\n                previewCurrent: index,\r\n                showPreview: true\r\n            })\r\n        },\r\n        chooseImage() {\r\n            if (this.uploading) return\r\n            wx.chooseImage({\r\n                count: this.data.maxCount - this.data.files.length,\r\n                sizeType: this.data.sizeType,\r\n                sourceType: this.data.sourceType,\r\n                success: (res) => {\r\n                    // console.log('chooseImage resp', res)\r\n                    // 首先检查文件大小\r\n                    let invalidIndex = -1\r\n                    // @ts-ignore\r\n                    res.tempFiles.forEach((item, index) => {\r\n                        if (item.size > this.data.maxSize) {\r\n                            invalidIndex = index\r\n                        }\r\n                    })\r\n                    if (typeof this.data.select === 'function') {\r\n                        const ret = this.data.select(res)\r\n                        if (ret === false) {\r\n                            return\r\n                        }\r\n                    }\r\n                    if (invalidIndex >= 0) {\r\n                        this.triggerEvent(\r\n                            'fail',\r\n                            {\r\n                                type: 1,\r\n                                errMsg: `chooseImage:fail size exceed ${this.data.maxSize}`,\r\n                                total: res.tempFilePaths.length,\r\n                                index: invalidIndex\r\n                            },\r\n                            {}\r\n                        )\r\n                        return\r\n                    }\r\n                    // 获取文件内容\r\n                    const mgr = wx.getFileSystemManager()\r\n                    const contents: ArrayBuffer[] = res.tempFilePaths.map((item) => {\r\n                        // @ts-ignore\r\n                        const fileContent: ArrayBuffer = mgr.readFileSync(item)\r\n                        return fileContent\r\n                    })\r\n                    const obj = {\r\n                        tempFilePaths: res.tempFilePaths,\r\n                        tempFiles: res.tempFiles,\r\n                        contents\r\n                    }\r\n                    // 触发选中的事件，开发者根据内容来上传文件，上传了把上传的结果反馈到files属性里面\r\n                    this.triggerEvent('select', obj, {})\r\n                    const files = res.tempFilePaths.map((item, i) => ({\r\n                        loading: true,\r\n                        // @ts-ignore\r\n                        url:\r\n                            res.tempFilePaths[i] ||\r\n                            `data:image/jpg;base64,${wx.arrayBufferToBase64(contents[i])}`\r\n                    }))\r\n                    if (!files || !files.length) return\r\n                    if (typeof this.data.upload === 'function') {\r\n                        const len = this.data.files.length\r\n                        const newFiles = this.data.files.concat(files)\r\n                        this.setData({\r\n                            files: newFiles,\r\n                            currentFiles: newFiles\r\n                        })\r\n                        this.loading = true\r\n                        this.data\r\n                            .upload(obj)\r\n                            .then((json) => {\r\n                                this.loading = false\r\n                                if (json.urls) {\r\n                                    const oldFiles = this.data.files\r\n                                    json.urls.forEach((url, index) => {\r\n                                        oldFiles[len + index].url = url\r\n                                        oldFiles[len + index].loading = false\r\n                                    })\r\n                                    this.setData({\r\n                                        files: oldFiles,\r\n                                        currentFiles: newFiles\r\n                                    })\r\n                                    this.triggerEvent('success', json, {})\r\n                                } else {\r\n                                    this.triggerEvent(\r\n                                        'fail',\r\n                                        {\r\n                                            type: 3,\r\n                                            errMsg: 'upload file fail, urls not found'\r\n                                        },\r\n                                        {}\r\n                                    )\r\n                                }\r\n                            })\r\n                            .catch((err) => {\r\n                                this.loading = false\r\n                                const oldFiles = this.data.files\r\n                                res.tempFilePaths.forEach((item, index) => {\r\n                                    oldFiles[len + index].error = true\r\n                                    oldFiles[len + index].loading = false\r\n                                })\r\n                                this.setData({\r\n                                    files: oldFiles,\r\n                                    currentFiles: newFiles\r\n                                })\r\n                                this.triggerEvent(\r\n                                    'fail',\r\n                                    {\r\n                                        type: 3,\r\n                                        errMsg: 'upload file fail',\r\n                                        error: err\r\n                                    },\r\n                                    {}\r\n                                )\r\n                            })\r\n                    }\r\n                },\r\n                fail: (fail: any) => {\r\n                    if (fail.errMsg.indexOf('chooseImage:fail cancel') >= 0) {\r\n                        this.triggerEvent('cancel', {}, {})\r\n                        return\r\n                    }\r\n                    fail.type = 2\r\n                    this.triggerEvent('fail', fail, {})\r\n                }\r\n            })\r\n        },\r\n        deletePic(e) {\r\n            const index = e.detail.index\r\n            const files = this.data.files\r\n            const file = files.splice(index, 1)\r\n            this.setData({\r\n                files,\r\n                currentFiles: files\r\n            })\r\n            this.triggerEvent('delete', { index, item: file[0] })\r\n        }\r\n    }\r\n})\r\n"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;ACAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAUA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAlDA;AAwDA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAFA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AAGA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAvHA;AAyHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAlJA;AAlEA;;;;;;;;","sourceRoot":""}